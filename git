Branching Strategies and Code Review Process

1. Branching Strategies:

   - Structure of Branching:
     - Main Branches:
       - `master` or `main`: Represents the production-ready codebase.
       - `develop`: Integration branch for ongoing development.
     - Feature Branches:
       - Prefixed with `feature/`: For developing new features.
       - Example: `feature/new-feature`
     - Bugfix Branches:
       - Prefixed with `bugfix/`: For fixing bugs.
       - Example: `bugfix/fix-issue`
     - Release Branches:
       - Prefixed with `release/`: For preparing releases.
       - Example: `release/version-x.y.z`
     - Hotfix Branches:
       - Prefixed with `hotfix/`: For urgent fixes in production.
       - Example: `hotfix/urgent-fix`

   - Naming Conventions for Branches:
     - Use lowercase letters and hyphens for readability.
     - Be descriptive but concise, indicating the purpose of the branch.

   - Creating a New Branch:
     - Use Git command: `git checkout -b branch-name`.
       Example: `git checkout -b tee/updatesocket`
     - Optionally, link the branch creation to a Jira task for tracking.

   - Checking Out to a New Branch:
     - Use Git command: `git checkout branch-name`.
       Example: `git checkout feature/new-feature`

2. Pushing Code and Reviewing Process:

   - Pushing New Code:
     - Commit changes to your branch using Git.
       Example: 
       ```
       git add .
       git commit -m "Implement new feature" or git commit —amend (commit to previous commit) -> :wq
       ```
     - Push the branch to the remote repository: `git push origin branch-name`.
       Example: `git push origin feature/new-feature`

   - Code Review Process:
     - Pull Request (PR) creation:
       - Create a PR from your feature/bugfix branch to `develop`.
       - Include a descriptive title and link to the related Jira task.
     - Reviewer Responsibilities:
       - Review code for functionality, readability, and adherence to coding standards.
       - Provide constructive feedback and suggestions for improvement.
       - Ensure code meets acceptance criteria defined in the related Jira task.
       - Approve or request changes on the PR accordingly.
     - Author Responsibilities:
       - Address reviewer comments promptly.
       - Refactor code if necessary based on feedback.
       - Update the PR with changes and seek re-review if needed.

   - Reviewer Checklist:
     - Functionality: Does the code achieve its intended purpose?
     - Readability: Is the code easy to understand and maintain?
     - Coding Standards: Does the code adhere to established conventions?
     - Testing: Are sufficient tests included to cover new functionality or fixes?
     - Documentation: Is the code adequately documented for future reference?
     - Performance: Are there any potential performance issues?
     - Security: Are there any security vulnerabilities or risks?

3. Additional Items:

   - Integration with Jira:
     - Link GitHub branches and PRs to related Jira tasks for seamless tracking.
     - Use Jira smart commits to update task status directly from commit messages.
	git commit -m ‘[Jira task ID] Comment’ 

   - Continuous Integration/Continuous Deployment (CI/CD):
     - Implement automated testing and deployment pipelines using tools like GitHub Actions or Jenkins.
     - Trigger CI/CD pipelines on branch pushes and PR merges for automated verification and deployment.

   - Team Collaboration:
     - Encourage collaboration and knowledge sharing among team members through code reviews and discussions.
     - Foster a culture of continuous improvement by reflecting on past processes and adapting as needed.

   - Documentation:
     - Maintain up-to-date documentation for project setup, development workflows, and coding standards.
     - Document any specific branching or release procedures unique to your project.

